# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/prices', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Price. As you add validations to Price, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    FactoryBot.build(:price).attributes.symbolize_keys
  end

  let(:invalid_attributes) do
    { open: nil }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # PricesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) { {} }

  before(:each) do
    @company = company_with_prices
  end

  after(:each) do
    @company&.destroy!
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      get company_prices_url(@company.id), headers: valid_headers, as: :json
      expect(response).to be_successful
    end

    it 'filters on the date field' do
      query_string = "start_date=#{15.days.ago.to_date}&end_date=#{1.day.ago.to_date}"
      get "#{company_prices_url(@company.id)}?#{query_string}",
          headers: valid_headers,
          as: :json
      expect(response).to be_successful
      body = JSON.parse(response.body)
      unless body.empty?
        price_date = Date.parse(body[0]['date'])
        expect(price_date.before?(1.day.ago)).to be(true)
        expect(price_date.after?(16.days.ago)).to be(true)
      end
    end

    it 'throws an error for invalid date' do
      query_string = "start_date=#{15.days.ago.to_date}&end_date=foo"
      expect do
        get "#{company_prices_url(@company.id)}?#{query_string}",
            headers: valid_headers,
            as: :json
      end.to raise_error(Date::Error)
    end

    it 'sorts by any field' do
      query_string = 'sort_by=open'
      get "#{company_prices_url(@company.id)}?#{query_string}",
          headers: valid_headers,
          as: :json
      expect(response).to be_successful
      body = JSON.parse(response.body)
      expect(body[0]['open'] < body[-1]['open']).to be(true)
    end

    it 'throws an error for an invalid field' do
      query_string = 'sort_by=price'
      expect do
        get "#{company_prices_url(@company.id)}?#{query_string}",
            headers: valid_headers,
            as: :json
      end.to raise_error(NoMethodError)
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      @company.prices.create! valid_attributes
      get company_prices_url(@company.id), as: :json
      expect(response).to be_successful
    end
  end
end
